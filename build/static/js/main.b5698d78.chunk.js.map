{"version":3,"sources":["components/ToDoItem.jsx","components/InputArea.jsx","components/App.jsx","index.js"],"names":["ToDoItem","props","onClick","onChecked","id","text","InputArea","className","onChange","type","value","inpText","add","App","useState","inputText","setInputText","items","setItems","deleteItem","prevItems","filter","item","index","event","newValue","target","map","todoItem","key","ReactDOM","render","document","getElementById"],"mappings":"wNAceA,MAZf,SAAkBC,GAChB,OACE,yBACEC,QAAS,WACPD,EAAME,UAAUF,EAAMG,MAGxB,4BAAKH,EAAMI,QCIFC,MAXf,SAAmBL,GACjB,OACE,yBAAKM,UAAU,QACb,2BAAOC,SAAUP,EAAMO,SAAUC,KAAK,OAAOC,MAAOT,EAAMU,UAC1D,4BAAQT,QAASD,EAAMW,KACrB,wCC2COC,MA9Cf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAcA,SAASC,EAAWf,GAClBc,GAAS,SAACE,GACR,OAAOA,EAAUC,QAAO,SAACC,EAAMC,GAC7B,OAAOA,IAAUnB,QAKvB,OACE,yBAAKG,UAAU,aACb,yBAAKA,UAAU,WACb,2CAEF,kBAAC,EAAD,CAAWC,SAzBf,SAAsBgB,GACpB,IAAMC,EAAWD,EAAME,OAAOhB,MAC9BM,EAAaS,IAuBwBb,IApBvC,WACEM,GAAS,SAACE,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsBL,OAExBC,EAAa,KAgBsCL,QAASI,IAC1D,6BACE,4BACGE,EAAMU,KAAI,SAACC,EAAUL,GAAX,OACT,kBAAC,EAAD,CACEM,IAAKN,EACLnB,GAAImB,EACJlB,KAAMuB,EACNzB,UAAWgB,WCrCzBW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b5698d78.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ToDoItem(props) {\n  return (\n    <div\n      onClick={() => {\n        props.onChecked(props.id);\n      }}\n    >\n      <li>{props.text}</li>\n    </div>\n  );\n}\n\nexport default ToDoItem;\n","import React from \"react\";\n\nfunction InputArea(props) {\n  return (\n    <div className=\"form\">\n      <input onChange={props.onChange} type=\"text\" value={props.inpText} />\n      <button onClick={props.add}>\n        <span>Add</span>\n      </button>\n    </div>\n  );\n}\n\nexport default InputArea;\n","import React, { useState } from \"react\";\nimport ToDoItem from \"./ToDoItem\";\nimport InputArea from \"./InputArea\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  function handleChange(event) {\n    const newValue = event.target.value;\n    setInputText(newValue);\n  }\n\n  function addItem() {\n    setItems((prevItems) => {\n      return [...prevItems, inputText];\n    });\n    setInputText(\"\");\n  }\n\n  function deleteItem(id) {\n    setItems((prevItems) => {\n      return prevItems.filter((item, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <InputArea onChange={handleChange} add={addItem} inpText={inputText} />\n      <div>\n        <ul>\n          {items.map((todoItem, index) => (\n            <ToDoItem\n              key={index}\n              id={index}\n              text={todoItem}\n              onChecked={deleteItem}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE: I have extracted the Input Area, including the <input> and\n//<button> elements into a seperate Component called InputArea.\n//Your job is to make the app work as it did before but this time with the\n//InputArea as a seperate Component.\n\n// DO NOT: Modify the ToDoItem.jsx\n// DO NOT: Move the input/button elements back into the App.jsx\n\n//Hint 1: You will need to think about how to manage the state of the input element\n//in InputArea.jsx.\n//Hint 2: You will need to think about how to pass the input value back into\n//the addItem() function in App.jsx.\n"],"sourceRoot":""}